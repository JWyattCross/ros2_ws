ros2 pkg create --build-type ament_python herding_control --dependencies rclpy geometry_msgs

#------------------------------------------------
#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist

class HerdingControl(Node):
    def __init__(self):
        super().__init__('herding_control_node')

        # Define publishers for each agent
        self.agent_publishers = {}
        agent_names = ['r1', 'r2', 'r3', 'r4', 'r5']  # Update with your actual agent names

        for agent in agent_names:
            topic_name = f'/{agent}/cmd_vel'
            self.agent_publishers[agent] = self.create_publisher(Twist, topic_name, 10)

        # Define a timer to publish commands periodically
        self.timer = self.create_timer(1.0, self.send_commands)

    def send_commands(self):
        for agent, pub in self.agent_publishers.items():
            twist = Twist()
            # Example: Send random or preset delta values to each agent
            twist.linear.x = 0.5  # Change these as needed
            twist.linear.y = 0.2
            pub.publish(twist)

def main(args=None):
    rclpy.init(args=args)
    herding_control = HerdingControl()
    rclpy.spin(herding_control)
    herding_control.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()

#----------------------------------------------------------------

from launch import LaunchDescription
from launch_ros.actions import Node

def generate_launch_description():
    return LaunchDescription([
        Node(
            package='matplotlib_sim',
            executable='matplotlib_sim_node',
            name='matplotlib_sim',
        ),
        Node(
            package='single_integrator_agent',
            namespace='r1',
            executable='single_int_node',
            name='single_integrator_agent_1',
            parameters=[
                {'x_init': 10.0},
                {'y_init': 10.0},
                {'name': 'r1'},
            ],
        ),
        Node(
            package='single_integrator_agent',
            namespace='r2',
            executable='single_int_node',
            name='single_integrator_agent_2',
            parameters=[
                {'x_init': -10.0},
                {'y_init': -10.0},
                {'name': 'r2'},
            ],
        ),
        # Additional agent nodes here...
        Node(
            package='herding_control',
            executable='herding_control_node',
            name='herding_control',
        ),
    ])
